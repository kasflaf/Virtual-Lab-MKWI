import { z } from "zod";
export declare const payloadSchema: z.ZodObject<{
    iss: z.ZodString;
    nonce: z.ZodNumber;
    exp: z.ZodNumber;
    iat: z.ZodOptional<z.ZodNumber>;
    nbf: z.ZodOptional<z.ZodNumber>;
    sub: z.ZodOptional<z.ZodString>;
    jti: z.ZodOptional<z.ZodString>;
    aud: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strict", z.ZodTypeAny, {
    iss: string;
    nonce: number;
    exp: number;
    iat?: number | undefined;
    nbf?: number | undefined;
    sub?: string | undefined;
    jti?: string | undefined;
    aud?: string | string[] | undefined;
}, {
    iss: string;
    nonce: number;
    exp: number;
    iat?: number | undefined;
    nbf?: number | undefined;
    sub?: string | undefined;
    jti?: string | undefined;
    aud?: string | string[] | undefined;
}>;
export declare const headerSchema: z.ZodObject<{
    alg: z.ZodString;
}, "strict", z.ZodTypeAny, {
    alg: string;
}, {
    alg: string;
}>;
export declare const signOptionsSchema: z.ZodObject<{
    algorithm: z.ZodOptional<z.ZodString>;
    header: z.ZodOptional<z.ZodObject<{
        alg: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        alg: string;
    }, {
        alg: string;
    }>>;
    encoding: z.ZodOptional<z.ZodString>;
    noTimestamp: z.ZodOptional<z.ZodBoolean>;
    expiresIn: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    notBefore: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    algorithm?: string | undefined;
    header?: {
        alg: string;
    } | undefined;
    encoding?: string | undefined;
    noTimestamp?: boolean | undefined;
    expiresIn?: string | number | undefined;
    notBefore?: string | number | undefined;
}, {
    algorithm?: string | undefined;
    header?: {
        alg: string;
    } | undefined;
    encoding?: string | undefined;
    noTimestamp?: boolean | undefined;
    expiresIn?: string | number | undefined;
    notBefore?: string | number | undefined;
}>;
