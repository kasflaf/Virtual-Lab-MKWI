import { z } from "zod";
export declare const verifyOptionsSchema: z.ZodObject<{
    audience: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    issuer: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    subject: z.ZodOptional<z.ZodString>;
    jwtid: z.ZodOptional<z.ZodString>;
    clockTimestamp: z.ZodOptional<z.ZodNumber>;
    nonce: z.ZodOptional<z.ZodNumber>;
    ignoreNotBefore: z.ZodOptional<z.ZodBoolean>;
    clockTolerance: z.ZodOptional<z.ZodNumber>;
    ignoreExpiration: z.ZodOptional<z.ZodBoolean>;
    maxAge: z.ZodOptional<z.ZodNumber>;
    complete: z.ZodOptional<z.ZodBoolean>;
    algorithm: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    audience?: string | string[] | undefined;
    issuer?: string | string[] | undefined;
    subject?: string | undefined;
    jwtid?: string | undefined;
    clockTimestamp?: number | undefined;
    nonce?: number | undefined;
    ignoreNotBefore?: boolean | undefined;
    clockTolerance?: number | undefined;
    ignoreExpiration?: boolean | undefined;
    maxAge?: number | undefined;
    complete?: boolean | undefined;
    algorithm?: string | undefined;
}, {
    audience?: string | string[] | undefined;
    issuer?: string | string[] | undefined;
    subject?: string | undefined;
    jwtid?: string | undefined;
    clockTimestamp?: number | undefined;
    nonce?: number | undefined;
    ignoreNotBefore?: boolean | undefined;
    clockTolerance?: number | undefined;
    ignoreExpiration?: boolean | undefined;
    maxAge?: number | undefined;
    complete?: boolean | undefined;
    algorithm?: string | undefined;
}>;
